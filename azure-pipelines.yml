stages:
- stage: 'BlackDuck_Scan'
  jobs:
    - job: detect
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true

      - task: CmdLine@2
        displayName: 'Install Python dependencies'
        inputs:
          script: |
            # Find all requirements.txt files and process them one by one
            find . -name "requirements.txt" -type f -exec sh -c '
              for req in "$@"; do
                  echo "Processing $req"

                  # Install packages from the current requirements.txt
                  while IFS= read -r package || [ -n "$package" ]; do
                      pip install --no-cache-dir --no-deps "$package" || echo "Failed to install $package"
                  done < "$req"

                  # Extract the path to the directory containing the current requirements.txt
                  req_dir=$(dirname "$req")

                  # Generate a unique code location name using the path to the requirements.txt
                  code_location_name="python-packages-$(echo "$req_dir" | tr / -)"
                  
                  echo "Black Duck scan will use code location: $code_location_name"

                  # Run the Black Duck scan for the current requirements.txt file by triggering SynopsysDetectTask
                  echo "Triggering Black Duck scan for $req"
                  
                  # Adding a delay of 10 seconds before moving to the next requirements.txt
                  echo "Waiting for 10 seconds before starting the next scan..."
                  sleep 10
              done
            ' sh {} +

      - task: SynopsysDetectTask@9
        displayName: 'Run Synopsys Detect'
        inputs:
          BlackDuckService: 'BlackDuck'
          DetectArguments: |
            --detect.project.name=velocity
            --detect.project.version.name=velocity
            --blackduck.trust.cert=true  
            --detect.detector.search.depth=100  
            --detect.tools=DETECTOR  
            --detect.detector.search.continue=true
            --detect.code.location.name=$(echo $code_location_name)
          DetectVersion: 'latest'